# 문제 및 해설 파일 (Exam Questions)
# 작성일: 2024-01-31
# 담당자: 박설진

=========================================

문제 1. 캐시계층을 사용하는 것의 장점과 실제 캐시계층이 사용되는 예시를 설명하시오 (주관식)

**정답:** 
캐시계층을 사용하면 속도와 효율적인 데이터 접근 측면에서 장점이 있습니다.

CPU와 메모리 간의 속도 차이가 매우 크기 때문에, 메인 메모리에서 데이터를 바로 가져오는 것보다 캐시 메모리에서 데이터를 빠르게 가져오는 것이 훨씬 효율적입니다.

캐시 계층을 통해 데이터를 계층적으로 저장하면, 자주 사용하는 데이터를 빠른 캐시에 유지할 수 있습니다. 이렇게 하면 CPU가 필요한 데이터를 더 빨리 찾을 수 있어 병목 현상을 최소화할 수 있습니다.

실제 사용되는 예시로는 데이터베이스단에서 자주 조회되는 데이터를 캐시하는 Redis, 웹서버단의 정적콘텐츠를 캐시하는 nginx서버, 운영체제의 CPU와 RAM사이의 레지스터 등이 있습니다.

-----------------------------------------

문제 2. 다음 중 캐시 히트(Cache Hit)와 캐시 미스(Cache Miss)에 대한 설명으로 옳지 않은 것은 고르시오 (객관식)

1) 캐시 히트는 CPU가 요청한 데이터가 캐시 메모리에 이미 존재할 때 발생한다.
2) 캐시 미스는 CPU가 요청한 데이터가 캐시 메모리에 존재하지 않아 메인 메모리에서 데이터를 가져와야 할 때 발생한다.
3) 캐시 히트가 발생하면 캐시의 크기가 감소할 수 있으며, 이는 시스템 성능 향상에 도움이 된다.
4) 캐시 미스가 발생하면 캐시 메모리에서 데이터를 가져오는 데 시간이 더 걸리고, 시스템 성능이 저하될 수 있다.
5) 캐시 히트가 발생하면 CPU는 캐시에서 데이터를 찾을 수 있으므로, 메인 메모리에서 데이터를 찾을 필요가 없어진다.

**정답:** 
3) 캐시 히트가 발생하면 캐시의 크기가 감소할 수 있으며, 이는 시스템 성능 향상에 도움이 된다.

**해설:** 
캐시 히트가 발생하면 캐시 메모리에서 데이터를 바로 가져오기 때문에, 메인 메모리에서 데이터를 가져오는 것보다 훨씬 빠르게 처리됩니다. 따라서 시스템 성능이 향상됩니다.
캐시의 크기는 히트나 미스와는 관계없이, 하드웨어 설계에서 결정되는 요소입니다. 캐시 히트가 발생한다고 해서 캐시의 크기가 감소하는 것은 아닙니다. 오히려, 더 많은 캐시 히트를 유도하려면 충분히 큰 캐시가 필요합니다.
-----------------------------------------

문제 3. 캐시메모리와 주메모리 간 데이터를 어떻게 매칭시킬지 결정하는 방식을 캐시 매핑이라고 한다, 캐시 매핑의 세가지 방법 중 집합-연관 매핑에 대해서 설명하시오. (주관식)

**정답:** 
캐시 매핑에서 집합-연관 매핑은 직접 매핑과 연관 매핑의 특징을 결합한 방식입니다.
캐시를 여러 개의 집합으로 나누고, 각 집합 내에서만 데이터를 매핑할 수 있게 만듭니다. 각 집합에는 여러 캐시 라인이 포함되어 있으며, 하나의 집합에 대해서만 연관 매핑을 사용하는 방식입니다. 

예를 들어, 4개의 집합에 2개의 캐시 라인이 있다면, 메모리 주소는 두 개의 라인 중 하나에 저장될 수 있습니다. 이렇게 집합 내에서만 선택할 수 있기 때문에, 충돌을 어느 정도 줄이면서도 하드웨어 복잡성을 어느 정도 줄여 성능을 향상시킬 수 있습니다.

**추가해설:**
직접 매핑은 각 메모리 주소가 하나의 고정된 캐시 라인에만 매핑됩니다. 즉, 메모리 주소를 특정 캐시 라인에만 할당할 수 있습니다. 이 방식은 단순하고 빠르지만, 충돌이 발생할 가능성이 높습니다. 예를 들어, 두 개의 메모리 주소가 동일한 캐시 라인에 매핑되면, 하나의 데이터만 캐시에서 유지될 수 있습니다.

반면 연관매핑은 메모리 주소가 캐시 내 어떤 라인에도 자유롭게 매핑될 수 있습니다. 즉, 데이터가 캐시의 어떤 라인에든 저장될 수 있기 때문에 충돌을 줄일 수 있지만, 캐시 내 모든 라인에 대한 검색이 필요하므로 하드웨어가 더 복잡하고 속도가 느려질 수 있습니다.

-----------------------------------------

문제 4. OS의 메모리 할당 방식 중 고정분할방식과 가변분할방식의 차이에 대해 설명하시오. (주관식)

**정답:**
고정분할방식은 메모리를 미리 같은 크기로 분할해서 할당하는 방법입니다. 고정분할 방식에서는 프로그램이 필요한 공간보다 더 많은 메모리가 할당되어 메모리 내부적으로 조각이 많이 생기는 내부단편화(internal fragmentation)가 발생합니다.

가변분할방식은 메모리를 고정된 크기 블록으로 나누지 않고, 프로그램에 필요한 만큼의 메모리를 동적으로 할당하는 방법입니다. 이를 통해 내부 단편화를 줄일 수 있지만, 프로그램이 메모리를 반환하면서 생기는 빈공간 사이에 더 큰 프로그램을 할당할 수 없게 되면 외부 단편화가 발생할 수 있습니다.
-----------------------------------------

문제 5. 다음 중 메모리 할당 방식인 페이징, 세그멘테이션, 페이지드 세그멘테이션에 대한 설명으로 옳지 않은 것은 고르시오 (객관식)

1) 페이징(Paging)은 메모리를 고정 크기의 블록인 페이지(Page)로 나누어 프로세스를 할당하는 방식이다.
2) 세그멘테이션(Segmentation)은 프로그램을 논리적 단위인 세그먼트(Segment)로 나누어 메모리에 할당하는 방식이다.
3) 페이지드 세그멘테이션(Pageed Segmentation)은 세그멘트를 페이지 크기로 나누어 세그멘트 내에서 페이징을 적용하는 방식이다.
4) 세그멘테이션은 주로 내부 단편화를 유발하고, 페이징은 주로 외부 단편화를 유발한다.
5) 페이지드 세그멘테이션은 내부 단편화와 외부 단편화를 모두 해결하려는 방식이다.

**정답:**
4) 세그멘테이션은 주로 내부 단편화를 유발하고, 페이징은 주로 외부 단편화를 유발한다.

**해설:**
세그멘테이션은 외부 단편화를 유발하고, 페이징은 내부 단편화를 유발합니다. 세그멘테이션은 각 세그먼트가 크기가 달라서 외부 단편화가 발생하고, 페이징은 각 페이지가 고정 크기이기 때문에 내부 단편화가 발생할 수 있습니다.

=========================================
