# 문제 파일 (Exam Questions)
# 작성일: 2025-02-28
# 담당자: 박설진

=========================================

문제 1. 디자인패턴이란 무엇인가요? (주관식)

-----------------------------------------

문제 2. 각각 디자인 패턴이 행동, 구조, 생성 패턴 중 어디에 해당하는지 답하시오

1. 팩토리 패턴 
2. 옵저버 패턴	
3. 전략 패턴 
4. 싱글톤 패턴	
5. 프록시 패턴	
6. 이터레이터 패턴 

-----------------------------------------

문제 3. 다음 중 팩토리 패턴에 대한 설명으로 옳지 않은 것은 무엇인가요?

1. 팩토리 패턴은 객체 생성 과정을 클라이언트로부터 숨기기 위해 사용됩니다.
2. 팩토리 패턴은 객체를 생성하는 로직을 하나의 클래스에서 처리하도록 하여, 클라이언트 코드에서 객체 생성 방식에 대한 의존성을 줄여줍니다.
3. 팩토리 메서드는 항상 new 연산자를 사용하여 객체를 생성합니다.
4. 팩토리 패턴을 사용하면 객체 생성의 로직을 캡슐화하고, 객체를 생성하는 클래스를 변경하더라도 클라이언트 코드에 영향을 주지 않습니다.
5. 팩토리 패턴은 객체의 생성 방식을 변경하거나 확장하는 데 유리합니다.

-----------------------------------------

문제 4. 옵저버 패턴에 대한 설명으로 옳지 않은 것은 무엇인가요?

1. 옵저버 패턴은 한 객체의 상태 변화가 있을 때 관련된 다른 객체들에게 자동으로 통지하는 패턴입니다.
2. 옵저버 패턴은 주체(Subject)와 옵저버(Observer) 간의 1:N 관계를 설정하여, 주체의 상태 변경 시 여러 옵저버가 반응하도록 합니다.
3. 옵저버 패턴은 상태 변화를 처리하는 데 있어서 순서가 중요하지 않기 때문에, 옵저버들이 알림을 받는 순서를 제어할 필요가 없습니다.
4. 옵저버 패턴은 GUI 애플리케이션에서 자주 사용됩니다.
5. 옵저버 패턴을 사용하면 주체와 옵저버가 느슨하게 결합되어, 서로 독립적인 클래스들로 유지될 수 있습니다.

-----------------------------------------

문제 5. 다음 중 전략 패턴에 대한 설명으로 옳지 않은 것은 무엇인가요?

1. 전략 패턴은 동일한 작업을 수행하는 여러 알고리즘을 캡슐화하여 클라이언트가 런타임에 이를 선택할 수 있게 합니다.
2. 전략 패턴은 알고리즘을 클래스로 캡슐화하고, 클라이언트가 그 알고리즘을 동적으로 변경할 수 있게 합니다.
3. 전략 패턴은 각 알고리즘을 인터페이스로 정의하고, 이를 구현하는 여러 전략 클래스를 생성합니다.
4. 전략 패턴을 사용하면 클라이언트가 알고리즘의 내부 구현을 알 필요 없이, 인터페이스만을 사용하여 알고리즘을 실행할 수 있습니다.
5. 전략 패턴은 알고리즘을 변경할 때마다 클라이언트 코드를 수정해야 하므로, 확장성에 불리합니다.

-----------------------------------------

문제 6. 싱글톤 패턴에 대한 설명으로 옳지 않은 것은 무엇인가요?

1. 싱글톤 패턴은 애플리케이션에서 하나의 인스턴스만 생성하여 사용하도록 보장하는 패턴입니다.
2. 싱글톤 패턴은 인스턴스를 지연 초기화(lazy initialization) 할 수 있도록 구현할 수 있습니다.
3. 싱글톤 패턴을 사용하면 메모리 사용량을 최소화할 수 있습니다.
4. 싱글톤 패턴은 여러 스레드가 동시에 접근할 때 스레드 안전을 보장하려면 추가적인 동기화 처리가 필요합니다.
5. 싱글톤 패턴은 객체를 두 번 이상 생성하는 것을 허용하지 않기 때문에, 동일한 객체를 반복해서 사용할 수 없습니다.

-----------------------------------------

문제 7. 프록시 패턴에 대한 설명으로 옳지 않은 것은 무엇인가요?

1. 프록시 패턴은 실제 객체에 대한 접근을 제어하는 대리 객체를 사용하는 패턴입니다.
2. 프록시 패턴을 사용하면 실제 객체를 지연 로딩하거나 접근 제어를 할 수 있습니다.
3. 프록시 패턴은 실제 객체를 사용하는 대신, 프록시 객체를 통해 모든 요청을 전달합니다.
4. 프록시 패턴을 사용하면 성능이 저하될 수 있습니다, 왜냐하면 모든 요청을 프록시가 처리하기 때문입니다.
5. 프록시 패턴은 뷰(View)와 같은 컴포넌트의 구현에서 디자인의 일관성을 제공하는 패턴입니다.

-----------------------------------------

문제 8. 이터레이터 패턴에 대한 설명으로 옳지 않은 것은 무엇인가요?

1. 이터레이터 패턴은 컬렉션 객체의 내부 구조를 노출시키지 않고 순차적으로 데이터를 접근할 수 있도록 합니다.
2. 이터레이터 패턴을 사용하면 컬렉션 객체의 데이터를 동일한 방식으로 처리할 수 있습니다.
3. 이 터레이터 패턴은 데이터를 처리하는 방법을 반복자 객체에 위임합니다.
4. 이터레이터 패턴은 컬렉션을 순회하는 방식에 대해 직접적인 제어를 제공합니다.
5. 이터레이터 패턴은 특정 컬렉션에만 사용할 수 있으며, 다른 종류의 컬렉션에서는 사용할 수 없습니다.

-----------------------------------------

문제 9. 다음 중 MVC 패턴에 대한 설명으로 옳지 않은 것은 무엇인가요?

1. MVC 패턴에서 모델(Model)은 애플리케이션의 비즈니스 로직과 데이터를 처리합니다.
2. 뷰(View)는 사용자의 입력을 처리하고 모델의 상태를 갱신합니다.
3. 컨트롤러(Controller)는 뷰(View)와 모델(Model)을 연결하여 사용자 입력을 처리하고, 모델을 업데이트하거나 뷰를 갱신합니다.
4. 뷰(View)는 모델(Model)의 상태 변화를 직접적으로 처리하고, 이를 화면에 반영합니다.
5. 컨트롤러(Controller)는 모델(Model)의 상태를 직접 수정하고, 뷰(View)에 그 변경사항을 반영합니다.

-----------------------------------------

문제 10. 다음 중 Flux 패턴에 대한 설명으로 옳지 않은 것은 무엇인가요?

1. Flux 패턴은 단방향 데이터 흐름을 강조하며, 액션(Action)을 통해 디스패처(Dispatcher)가 스토어(Store)에 데이터를 전달합니다.
2. Flux 패턴에서 뷰(View)는 디스패처를 통해 스토어에 데이터를 전달하고, 스토어에서 상태를 업데이트합니다.
3. Flux 패턴은 애플리케이션에서 발생하는 모든 변경 사항을 스토어에서 관리하며, 뷰(View)는 이 상태를 스토어에서 받아와 렌더링합니다.
4. Flux 패턴에서 디스패처(Dispatcher)는 액션(Action)을 처리하고, 스토어(Store)의 상태를 갱신합니다.
5. Flux 패턴은 단방향 데이터 흐름을 유지하여 복잡한 상태 관리가 단순화되고 예측 가능하게 만듭니다.

