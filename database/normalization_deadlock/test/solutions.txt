# 문제 파일 (Exam Questions)
# 작성일: 2025-02-21
# 담당자: 박설진

=========================================

문제 1. 데이터베이스 정규화란 무엇인가? (주관식)

해설:
데이터베이스 정규화는 중복을 줄이고 데이터 무결성을 유지하기 위해 테이블을 분해하는 과정입니다. 정규화는 데이터를 논리적으로 일관성 있게 구성하기 위해 여러 단계의 정규형(1NF, 2NF, 3NF, BCNF 등)으로 나누어 수행됩니다. 각 정규형은 특정 규칙을 충족하여, 데이터 중복을 최소화하고 삽입/삭제/갱신 이상을 방지합니다. 정규화는 데이터베이스 설계의 핵심 기술로, 데이터의 효율적인 저장과 관리에 중요합니다.
-----------------------------------------

문제 2. 다음은 무엇에 대한 설명인가? (단답형)
데이터베이스의 중복 된 레코드 중 일부만 변경되어 모순되는 데이터가 발생하는 현상

정답 : 이상현상 중 갱신이상
-----------------------------------------

문제 3. 함수적 종속성 (Functional Dependency)에 대해서 완전함수종속, 부분함수종속의 개념을 넣어 설명해 보시오 (주관식)

해설:
함수적 종속성은 어떤 속성 값이 다른 속성 값에 의존하는 관계를 의미합니다.
완전 함수 종속 (Full Functional Dependency)은 비기본키 속성이 기본키 전체에 의존할 때, 이를 완전 함수 종속이라고 합니다. 즉, 기본키가 여러 속성으로 구성된 경우, 비기본키 속성이 기본키 전체에 의존해야 합니다. 
반면 부분 함수 종속 (Partial Functional Dependency)은 비기본키 속성이 기본키의 일부 속성에만 의존하는 경우를 부분 함수 종속이라고 합니다. 

예를 들어, 테이블에서 학생ID, 과목코드가 기본키라면, 학생ID만으로 결정되는 학생이름은 부분 함수 종속입니다. 반면, 학생ID, 과목코드 전체로 결정되는 성적은 완전 함수 종속입니다.
-----------------------------------------

문제 4. 다음 중 **제1정규형(1NF)**을 만족하지 않는 테이블은 무엇인가?

A. 모든 컬럼의 값이 원자적이며, 하나의 값만을 가진다.
B. 테이블에서 모든 값이 하나의 데이터 타입을 따른다.
C. 컬럼에 중복된 값이 존재하지 않는다.
D. 테이블에서 각 행은 유일하게 식별될 수 있다.
E. 특정 컬럼에 배열 형태의 값이 저장되어 있다.

정답: E
해설:
제1정규형(1NF)은 모든 컬럼의 값이 원자적이어야 한다는 조건을 만족해야 합니다. 즉, 컬럼에 배열이나 리스트 형태의 값이 저장되어 있으면 1NF를 만족하지 않습니다. 따라서 E번, "특정 컬럼에 배열 형태의 값이 저장되어 있다"는 1NF를 만족하지 않는 예시입니다.
-----------------------------------------

문제 5. 다음 중 **제2정규형(2NF)**에 대한 설명으로 옳지 않은 것은 무엇인가?

A. 제2정규형은 제1정규형을 만족해야 한다.
B. 모든 비기본키 속성은 기본키에 대해 완전 함수 종속이어야 한다.
C. 기본키의 일부에만 의존하는 속성은 제거되어야 한다.
D. 제2정규형에서는 모든 속성이 기본키에 대해 부분 함수 종속되어야 한다.
E. 제2정규형은 데이터 중복을 최소화하기 위해 비기본키 속성들의 의존성을 정리한다.

정답: D
해설:
제2정규형(2NF)은 제1정규형을 만족한 후, 모든 비기본키 속성이 기본키에 대해 완전 함수 종속해야 한다는 조건을 가지고 있습니다. 부분 함수 종속이란 기본키의 일부에 의존하는 경우를 의미하는데, 이를 제거해야 2NF가 성립합니다. 
-----------------------------------------

문제 6. 다음 중 **제3정규형(3NF)**을 만족하는 테이블의 특성으로 옳은 것은 무엇인가?

A. 기본키에 대한 부분 함수 종속이 존재할 수 있다.
B. 기본키에 의존하지 않는 비기본키 속성이 다른 비기본키 속성에 의존하는 것이 허용된다.
C. 기본키에 대한 완전 함수 종속만 존재한다.
D. 기본키 외의 속성이 다른 비기본키 속성에 의존하지 않아야 한다.
E. 제3정규형에서는 테이블을 분해하여 데이터 중복을 최소화한다.

정답: D
해설:
제3정규형(3NF)은 기본키에 의존하지 않는 속성이 다른 비기본키 속성에 의존하는 것을 제거하는 조건을 만족해야 합니다. 이는 이행적 함수 종속을 제거하는 것이 핵심입니다. D번, "기본키에 대한 완전 함수 종속만 존재한다"는 3NF의 특성과 맞지 않으며, 제3정규형에서는 비기본키 속성이 다른 비기본키 속성에 의존하지 않도록 해야 합니다.
-----------------------------------------

문제 7. 다음 중 **보이스 코드 정규형(BCNF)**에 대한 설명으로 옳지 않은 것은 무엇인가?

A. BCNF는 제3정규형(3NF)을 강화한 형태이다.
B. 테이블의 모든 함수 종속에서 종속되는 속성은 반드시 외래키여야 한다.
C. BCNF에서는 모든 속성이 기본키에만 의존해야 한다.
D. 기본키 외의 속성에 의존하는 비기본키 속성은 허용되지 않는다.
E. BCNF는 데이터 중복을 제거하고 데이터 일관성을 유지하는 데 도움이 된다.

정답: B
해설:
보이스 코드 정규형(BCNF)은 모든 함수 종속이 후보키에 의존해야 한다는 조건을 만족해야 합니다. BCNF에서는 기본키 외에 다른 속성이 비기본키 속성에 의존하는 것이 허용되지 않습니다.

-----------------------------------------

문제 8. 정규화의 주요 목표로 가장 적절한 것은 무엇인가?

A. 데이터의 무결성을 높이고, 중복을 최소화하며, 데이터베이스의 성능을 향상시키는 것이다.
B. 모든 데이터를 하나의 테이블에 저장하여 처리 속도를 높이는 것이다.
C. 쿼리 성능을 향상시키기 위해 데이터를 여러 서버로 분산시키는 것이다.
D. 각 데이터베이스에 대해 별도의 스토리지 엔진을 사용하는 것이다.
E. 모든 테이블을 하나로 합쳐서 데이터를 쉽게 관리할 수 있도록 하는 것이다.

정답: A
해설:
정규화의 주요 목표는 데이터의 무결성을 높이고, 중복을 최소화하며, 데이터베이스의 성능을 향상시키는 것입니다. 정규화는 데이터를 분해하고 관계를 잘 정의하여 데이터 중복을 제거하고, 이를 통해 효율적인 저장과 빠른 쿼리 성능을 얻을 수 있게 됩니다. A번이 정규화의 목적을 잘 설명하고 있습니다.
-----------------------------------------

문제 9. 데이터베이스 데드락과 이를 방지하는 방법에 대해서 설명해보시오 (주관식)

해설:
데드락(Deadlock)은 여러 트랜잭션이 서로 자원을 기다리며 무한정 대기하는 상태를 말합니다. 즉, 각 트랜잭션이 다른 트랜잭션이 가지고 있는 자원을 기다리며, 서로가 서로를 기다리는 상황이 발생하는 것입니다. 이로 인해 시스템은 더 이상 진행될 수 없게 됩니다.

데드락은, 미리 데드락을 탐지하는 데드락 탐지 방법과 애초에 데드락이 발생하도록 예방하는 데드락 방지 방법 등 여러 가지가 있습니다 (아래 중 설명)

Wait-Die: 우선순위가 높은 트랜잭션이 자원을 요청하면 기다리고, 우선순위가 낮은 트랜잭션이 자원을 요청하면 해당 트랜잭션을 죽여 데드락을 방지합니다.
Wound-Wait: 우선순위가 높은 트랜잭션이 자원을 요청하면 자원을 차지하고, 우선순위가 낮은 트랜잭션이 자원을 요청하면 해당 트랜잭션을 죽여 먼저 자원을 할당합니다.
Timeout: 트랜잭션이 일정 시간 이상 자원을 기다리면 타임아웃을 발생시키고 해당 트랜잭션을 종료하여 자원을 반환합니다.
Wait-for Graph: 트랜잭션 간의 자원 요청 관계를 그래프로 만들고, 그래프에 순환이 생기면 데드락이 발생했다고 판단하고 트랜잭션을 종료합니다.
이 외에도 격리 수준 변경과 같은 방법으로 자원 잠금을 최적화하여 데드락을 최소화할 수 있습니다.
-----------------------------------------

문제 10. 데이터베이스 데드락을 방지하기 위한 방법으로 옳지 않은 것은 무엇인가?

A. Wait-Die: 트랜잭션이 자원을 기다릴 때, 자원을 이미 요청한 트랜잭션이 더 높은 우선순위를 가진 경우 기다리며, 낮은 우선순위를 가진 경우 죽인다.
B. Wound-Wait: 자원을 기다리는 트랜잭션이 더 낮은 우선순위를 가진 경우 기다리고, 더 높은 우선순위를 가진 트랜잭션이 자원을 요청하면 자신이 해당 트랜잭션을 "죽여" 먼저 자원을 차지하게 한다.
C. Timeout: 일정 시간이 지난 후, 자원을 기다리던 트랜잭션이 일정 시간 이상 기다리면 자원을 포기하고 트랜잭션을 종료시킨다.
D. Wait-for Graph: 트랜잭션 간의 자원 요청 관계를 그래프 형태로 만들어서 순환(사이클)이 생기면 데드락이 발생했다고 판단하고 해당 트랜잭션을 종료시킨다.
E. 격리수준 변경: 트랜잭션의 격리수준을 변경하여 데드락을 방지하는 방법으로, 예를 들어 READ UNCOMMITTED로 변경하여 자원 잠금을 최소화할 수 있다.

정답: E
해설:
A. Wait-Die: 우선순위가 더 높은 트랜잭션이 자원을 요청하면 기다리고, 우선순위가 더 낮은 트랜잭션은 "죽여서" 데드락을 방지하는 방법입니다.
B. Wound-Wait: 우선순위가 낮은 트랜잭션을 죽여 자원을 먼저 차지하도록 하는 방식으로, 데드락을 방지할 수 있습니다.
C. Timeout: 일정 시간 후 트랜잭션을 종료시켜 자원을 해제하는 방식으로, 데드락을 피하는 방법입니다.
D. Wait-for Graph: 자원 요청 관계를 그래프 형태로 나타내어 순환이 발생하면 데드락을 발생한 것으로 보고 트랜잭션을 종료하는 방법입니다.
E. 격리수준 변경: 트랜잭션의 격리수준을 낮추는 것은 자원 잠금을 최소화할 수 있지만, 이는 데드락 방지의 방법이 아니며, 데이터의 일관성 문제를 초래할 수 있습니다. 따라서 E번은 옳지 않은 방법입니다.
